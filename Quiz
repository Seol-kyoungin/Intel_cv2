package com.example.cv2

import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import com.example.cv2.Question
import com.example.cv2.QuestionData
import com.example.cv2.ui.theme.CV2Theme

class Quiz : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            CV2Theme {
                AppContent()
            }
        }
    }
}

@Composable
fun AppContent() {
    var showResult by remember { mutableStateOf(false) }
    var score by remember { mutableStateOf(0) }

    if (showResult) {
        ResultScreen(score = score, totalQuestions = QuestionData.getQuestions().size)
    } else {
        QuizScreen(
            questions = QuestionData.getQuestions(),
            onQuizCompleted = { finalScore ->
                score = finalScore
                showResult = true
            }
        )
    }
}

@Composable
fun QuizScreen(
    questions: List<Question>,
    onQuizCompleted: (Int) -> Unit
) {
    var currentPosition by remember { mutableStateOf(0) }
    var selectedOption by remember { mutableStateOf(0) }
    var showDialog by remember { mutableStateOf(false) }
    var dialogMessage by remember { mutableStateOf("") }
    var score by remember { mutableStateOf(0) }
    val currentQuestion = questions[currentPosition]
    val context = LocalContext.current

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Spacer(modifier = Modifier.height(60.dp))

        Text(
            text = "총 ${questions.size}문제 중 ${currentPosition + 1}번째 문제",
            fontSize = 20.sp
        )

        Spacer(modifier = Modifier.height(60.dp))

        LinearProgressIndicator(
            progress = (currentPosition + 1) / questions.size.toFloat(),
            modifier = Modifier
                .fillMaxWidth()
                .height(8.dp)
        )

        Spacer(modifier = Modifier.height(60.dp))

        //문제
        Text(
            text = currentQuestion.question,
            fontSize = 30.sp,
            fontWeight = FontWeight.Bold
        )

        Spacer(modifier = Modifier.height(50.dp))

        listOf(
            currentQuestion.option_one,
            currentQuestion.option_two,
            currentQuestion.option_three,
            currentQuestion.option_four
        ).forEachIndexed { index, option ->
            OptionItem(option = option, isSelected = selectedOption == index + 1) {
                selectedOption = index + 1
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        Button(onClick = {
            if (selectedOption != 0) {
                if (selectedOption == currentQuestion.correct_answer) {
                    dialogMessage = "정답입니다"
                    score++
                } else {
                    dialogMessage = "틀렸습니다"
                }
                showDialog = true
            } else {
                Toast.makeText(context, "문제를 선택해 주세요.", Toast.LENGTH_SHORT).show()
            }
        }) {
            Text(text = if (currentPosition < questions.size - 1) "다음" else "Finish")
        }

        if (showDialog) {
            AlertDialog(
                onDismissRequest = { showDialog = false },
                title = { Text(text = dialogMessage) },
                confirmButton = {
                    TextButton(onClick = {
                        showDialog = false
                        selectedOption = 0
                        if (currentPosition < questions.size - 1) {
                            currentPosition++
                        } else {
                            onQuizCompleted(score)
                        }
                    }) {
                        Text(text = "OK")
                    }
                }
            )
        }
    }
}

@Composable
fun OptionItem(option: String, isSelected: Boolean, onClick: () -> Unit) {
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp)
            .background(
                color = if (isSelected) Color.Gray else Color.White,
                shape = RoundedCornerShape(5.dp)
            )
            .clickable(onClick = onClick)
            .padding(16.dp),
        contentAlignment = Alignment.Center
    ) {
        Text(
            text = option,
            fontSize = 20.sp
        )
    }
}
